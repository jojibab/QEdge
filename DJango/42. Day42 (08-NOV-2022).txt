==================================================================
***DJango Project (BlogProject)***
--------------------------------------
Now, apply CustomManager for our Model(Post),
Ex:-
==> models.py (BlogApp main-folder)
--------------------------------------------
from django.db import models
from django.contrib.auth.models import User #user-authentication
from django.utils import timezone
# Create your models here.
#from django.core.urlresolvers import reverse #old-lib
from django.urls import reverse	#new-lib
# Create your models here.
class CustomManager(models.Manager):
	def get_queryset(self):
		return super().get_queryset().filter(status='published')

class Post(models.Model):
	STATUS_CHOICES=(('draft', 'Draft'), ('published', 'Published'));
	title=models.CharField(max_length=264)
	slug=models.SlugField(max_length=264,unique_for_date='publish')
	author=models.ForeignKey(User,related_name='blog_posts',on_delete=models.CASCADE)
	body=models.TextField()
	publish=models.DateTimeField(default=timezone.now)
	created=models.DateTimeField(auto_now_add=True) #datetime of create() action
	updated=models.DateTimeField(auto_now=True)  #datetime of save() action
	status=models.CharField(max_length=10,choices=STATUS_CHOICES,default='draft')
	objects=CustomManager();
	class Meta:
		ordering=('-publish',)
		def __str__(self):
			return self.title

	def get_absolute_url(self):
			return reverse('post_detail', args=[self.publish.year,self.publish.strftime('%m'), self.publish.strftime('%d'), self.slug])

**** 
Note: By using reverse() method we will get canonical URLs & after inserting the post, it goes to post_detail.html

==** Also perform makemigrations,sqlmigrate,migrate & verify tables in mysql-db


Ex:-
==> base.html (templates/BlogApp folder)
----------------------------------------------
<!DOCTYPE html>
{%load static%}
<html lang="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="{% static 'css/blog.css'%}">
        <title>{%block title%}{%endblock%}</title>
    </head>
    <body>
        <div class="content">
            {%block content%}{%endblock%}
        </div>
        <div class="sidebar">
            <h2>SRI SAI SIR BLOG</h2>
            <p>Watch here for Python Related content..!!</p>
        </div>
    </body>
</html>



Ex:-
==> post_list.html (templates/BlogApp folder)
---------------------------------------------------
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title%}SRI SAI BLOG{%endblock%}
{%block content%}
    <h1>SRI SAI Blog</h1>
    <hr />
    {%for post in post_list%}
        <h2><a href="{{post.get_absolute_url}}">{{post.title}}</a></h2>
        <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body| truncatewords:30|linebreaks}}
    {%endfor%}
{%endblock%}


Ex:-
==> post_detail.html (templates/BlogApp folder)
---------------------------------------------------
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title %}{{post.title}}{%endblock%}
{%block content%}
    <h1>{{post.title}}</h1>
    <hr />
    <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
    {{post.body|linebreaks}}
{%endblock%}


Ex:-
==> blog.css  (static/css folder)
--------------------------------------------
.content{
    float:left;
    width: 60%;
    padding:0 0 0 30px;
}
.sidebar{
    float:right;
    width:30%;
    padding:10px;
    background: green;
    height: 100%;
}
h1{
    text-align: center;
    border-bottom: 1px solid #bbb;
    padding: 0 0 10px 0;
}
#date{
    color:yellow;
    font-size:12px;
    font-style: italic;
}
body{
    background: red;
    color:white;
}

=>> Also, add static-urls in settings.py
Ex:-
settings.py (BlogRealTimeProject conf-folder)
------------------------------------------------
STATIC_URL = '/static/'
import os;
STATIC_DIR = os.path.join(BASE_DIR,'static')
STATICFILES_DIRS = [
    STATIC_DIR,
]

NOTE:-
= Re-start the server & goto base-url
(http://localhost:8000/)
(goes to default-url post_list.html)



============================================================
===> Django Pagination::-
(no.of.posts/records displayed in post_list.html page at-a-time)
= If more number of posts (or records) are available then it is highly recommended to display all records across multiple pages, so that end user can feel more comfortable (look & feel)
= This concept is called Pagination 
(i.e. Displaying records across multiple pages is called pagination)
=*** Django provides inbuilt-support for Pagination.
(It contains paginator-module and Paginator class)
(django.core.paginator)


Ex:-
==> views.py (BlogApp main-folder)
----------------------------------------
#post-list-view with paginator-codes...
from django.shortcuts import render,get_object_or_404
from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger
from BlogApp.models import Post
# Create your views here.
def post_list_view(request):
    post_list=Post.objects.all()
    paginator=Paginator(post_list,2)		#no.of.pages(20/2-rec=>10-pages)
    page_number=request.GET.get('page')
    try:
        post_list=paginator.page(page_number)
    except PageNotAnInteger:
        post_list=paginator.page(1)
    except EmptyPage:
        post_list=paginator.page(paginator.num_pages)
    return render(request,'BlogApp/post_list.html',{"post_list":post_list})


===> How Pagination Works::-
Steps:-
1) We have to create Paginator object with list of records and number of records per page
Ex:-
	paginator = Paginator(post_list,2)
2) We have to get list of records related to current page as follows,
Ex:-
	page_number = request.GET.get('page')
	post_list = paginator.page(page_number)
3) If the page_number is not an integer, means that we are not passing any page number in the query string with page attribute it means it is first page, then we have to get first page records as follows,
Ex:-
	post_list=paginator.page(1)
4) If the parameter is higher than last page number then we will get EmptyPage. Instead of displaying EmptyPage we have to display last page records as follows,
Ex:-
	post_list = paginator.page(paginator.num_pages)

Now,(include paginator-html-code)		
===> page_list.html	 (templates/BlogApp folder)
--------------------------------------------------
= We have to add only one include tag to include paginator where ever pagination is required.
Ex:-
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title%}SRI SAI BLOG{%endblock%}
{%block content%}
    <h1>SRI SAI Blog</h1>
    <hr />
    {%for post in post_list%}
        <h2><a href="{{post.get_absolute_url}}">{{post.title}}</a></h2>
        <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body| truncatewords:30|linebreaks}}
    {%endfor%}
    {%include 'BlogApp/pagination.html' with page=post_list%}
{%endblock%}



Ex:-
==> pagination.html (templates/BlogApp folder)
------------------------------------------------------
	<div class="paginator">
		<span>
			{%if page.has_previous%}
				<a href="?page={{page.previous_page_number}}">Previous</a>
			{% endif%}
		</span>
		<span class="current">
			page {{page.number}} of {{page.paginator.num_pages}}
		</span>
		<span>
			{%if page.has_next%}
				<a href="?page={{page.next_page_number}}">Next</a>
			{%endif%}
		</span>
	</div>

=**
Note: We can reuse this common pagination template anywhere pagination is required.
(re-start server & refresh home-page(post_list.html))


****Start-Here****
------------------------
===> Class Based Views For Pagination:
= We have to use "paginate_by" property to specify the number of records per page.
= ListView will always send 'page_obj' default-object which contains the current page records

Ex:-
views.py (BlogApp main-folder)
-------------------------------------
#Listview with pagination
from django.views.generic import ListView
class PostListView(ListView):
    model=Post
    paginate_by=1

Ex:-
==> post_list.html (BlogApp main-folder)
-----------------------------------------
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title%}SRI SAI BLOG{%endblock%}
{%block content%}
    <h1>SRI SAI Blog</h1>
    <hr />
    {%for post in post_list%}
        <h2><a href="{{post.get_absolute_url}}">{{post.title}}</a></h2>
        <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body| truncatewords:30|linebreaks}}
    {%endfor%}
    {% comment %}{%include 'BlogApp/pagination.html' with page=post_list%} {% endcomment %}
    {%include 'BlogApp/pagination.html' with page=page_obj%}
{%endblock%}


Ex:-
==> pagination.html (BlogApp main-folder)
-------------------------------------------
<div class="paginator">
    <span>
        {%if page.has_previous%}
            <a href="?page={{page.previous_page_number}}">Previous</a>
        {% endif%}
    </span>
    <span class="current">
        page {{page.number}} of {{page.paginator.num_pages}}
    </span>
    <span>
        {%if page.has_next%}
            <a href="?page={{page.next_page_number}}">Next</a>
        {%endif%}
    </span>
</div>

==*** Restart the server & request below URL,
http://localhost:8000/



(***Another-Features****)
==>>> Mail Sending Functionality::-
= In the web application sending mail is very common requirement. Django provides in built support for mail sending functionality.
=** Django provides mail-module & send_mail() function

= To send email compulsory SMTP Server must be required.
(SMTP â†’ Simple Mail Transfer Protocol)
= Now, we have to configure SMTP Server information in the "settings.py" file
EMAIL_HOST: The SMTP Server Host. The default value is localhost
EMAIL_PORT: The SMTP Server Port. The default value is 25
EMAIL_HOST_USER: Username for SMTP Server
EMAIL_HOST_PASSWORD:Password for SMTP Server
EMAIL_USE_TLS: whether to use a TLS Secure Connection
	(TLS: Transport Layer Security)

Ex:-
settings.py (BlogRealTimeProject conf-folder)
-------------------------------------------------
==> For gmail SMTP Server::-
#Gmail SMTP configurations
EMAIL_HOST= 'smtp.gmail.com'
EMAIL_PORT= 587
EMAIL_HOST_USER= "srikanth.sai.sir@gmail.com"	#your own-email-id
EMAIL_HOST_PASSWORD="Od1..@"		#your own-pwd
EMAIL_USE_TLS= True

=> Now in views.py, simple use below-code::-
---------------------------------------------------
= We can send mail by using send_mail() function
Ex:-
send_mail(subject,msg, sender,[list-of-receivers],fail_silently=False)
= Here,
(fail_silently is optional parameter. We are telling to raise exception if email not sending properly)
(True means raise no-exception)
(False means raise exception)

Ex:- (sample-code)
from django.core.mail import send_mail
send_mail('Hello', 'Very imp msg....','srikanth.sai.sir@gmail.com',['xxx@gmail.com',yyy@gmail.com'])

Now,
= If we are getting 1 then the mail sent successfully o.w Error...



