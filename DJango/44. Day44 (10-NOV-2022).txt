
(Now, new-feature)
===> Adding Tags Functionality To our Application:
(Tags for a post provides posting to that particular user or topic)
*** Advantages of Tagging
1) For Search Engine Optimization
2) For easy navigation to the end-user
(this feature allows our website to be find easily when end-users of computer performs searching process in search websites like www.google.com etc)

=** By using 3rd party application 'django-taggit' we can implement tagging in our application.

=> How to install django-taggit Application
cmd> pip install django-taggit
(already available in django-4.1.2)

Ex:-
=> After installation add this application in the settings.py
Ex:-
settings.py (BlogRealTimeProject conf-folder)
-----------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'BlogApp.apps.BlogappConfig',
    'taggit'
]


Ex:-
Now,
*** Add TaggableManager to our Post Model::-
Ex:-
models.py (BlogApp main-folder)  ##make-modifications
---------------------------------------------------------
from taggit.managers import TaggableManager
class Post(models.Model):
	..........
	objects=CustomManager();
	tags=TaggableManager()
	..........


Ex:-(not-req)
==> Now go to views.py(NReq), & perform below operations,
Ex:-
= To get all Posts
	Post.objects.all()
= To get all tags associated with a post
	Post.tags.all()


Ex:-
==> Now perform makemigrations and migrate::-
(to reflect changes made to Post model)
(In terminal)
cmd> py manage.py makemigrations
Migrations for 'BlogApp':
  BlogApp\migrations\0003_post_tags.py
    - Add field tags to post

cmd> py manage.py migrate


Now,
===> Operations related to taggit::-
(for verification purpose in terminal/shell)
cmd> py manage.py shell
>>> from BlogApp.models import Post
>>> post=Post.objects.get(id=2)
>>> post.tags.add('python','django', 'html','krishna')
>>> post.tags.all()
<QuerySet [<Tag: python>, <Tag: html>, <Tag: django>, <Tag: krishna>]> 
>>> post.tags.remove('krishna')
>>> post.tags.all()
<QuerySet [<Tag: python>, <Tag: html>, <Tag: django>]>


==> optionally, also verify in mysql-db,
mysql> show tables;
(We get 2-extra table) taggit_tag/taggit_taggeditem)
mysql> select * from taggit_tag;
+----+---------+---------+
| id | name    | slug    |
+----+---------+---------+
|  1 | python  | python  |
|  2 | html    | html    |
|  3 | django  | django  |
|  4 | krishna | krishna |
+----+---------+---------+
4 rows in set (0.00 sec)

mysql> select * from taggit_taggeditem;
+----+-----------+-----------------+--------+
| id | object_id | content_type_id | tag_id |
+----+-----------+-----------------+--------+
|  1 |         2 |               7 |      1 |
|  2 |         2 |               7 |      2 |
|  3 |         2 |               7 |      3 |
|  4 |         2 |               7 |      4 |
+----+-----------+-----------------+--------+
4 rows in set (0.00 sec)


mysql> select * from django_content_type;
+----+--------------+-------------+
| id | app_label    | model       |
+----+--------------+-------------+
|  1 | admin        | logentry    |
|  3 | auth         | group       |
|  2 | auth         | permission  |
|  4 | auth         | user        |
|  8 | BlogApp      | comment     |
|  7 | BlogApp      | post        |
|  5 | contenttypes | contenttype |
|  6 | sessions     | session     |
|  9 | taggit       | tag         |
| 10 | taggit       | taggeditem  |
+----+--------------+-------------+
10 rows in set (0.00 sec)


****START-Coding-Here****
===> Add Tags to the List Page::-
= To display tags associated with current post, we have to write code as follows,
Ex:-
	{%for post in post_list%}
		....
		<p>Tags:{{post.tags.all|join:','}}</p>
		....
	{%endfor%}

Ex:-
==> post_list.html ( BlogApp main-folder)
--------------------------------------------------
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title%}SRI SAI BLOG{%endblock%}
{%block content%}
    <h1>SRI SAI Blog</h1>
    <hr />
    {%for post in post_list%}
        <h2><a href="{{post.get_absolute_url}}">{{post.title}}</a></h2>
        <p>Tags:{{post.tags.all|join:','}}</p>
        <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body| truncatewords:30|linebreaks}}
    {%endfor%}
    {%include 'BlogApp/pagination.html' with page=post_list%}
    {% comment %}{%include 'BlogApp/pagination.html' with page=page_obj%} {%endcomment %}
{%endblock%}


Now,
=>> Editing post_list_view() for Tags,
= If we click any tag-name then to display all posts related to that tag we have to edit view function
Ex:-
views.py (BlogApp main-folder)
---------------------------------
#post-list-view with paginator-codes...
from django.shortcuts import render,get_object_or_404
from django.core.paginator import Paginator,EmptyPage,PageNotAnInteger
from BlogApp.models import Post
from taggit.models import Tag
# Create your views here.
def post_list_view(request,tag_slug=None):
    print("post_list_view with paginator")
    post_list=Post.objects.all()
    tag = None
    if tag_slug:
        tag = get_object_or_404(Tag, slug=tag_slug)
        post_list = post_list.filter(tags__in=[tag])

    paginator=Paginator(post_list,2)            #no.of.pages(20/2-rec=>10-pages)
    page_number=request.GET.get('page')
    try:
        post_list=paginator.page(page_number)
    except PageNotAnInteger:
        post_list=paginator.page(1)
    except EmptyPage:
        post_list=paginator.page(paginator.num_pages)
    return render(request,'BlogApp/post_list.html',{"post_list":post_list,'tag':tag})

]

Ex:-
==> urls.py (BlogRealTimeProject conf-folder)
------------------------------------------------
from django.contrib import admin
from django.urls import path,re_path
from BlogApp import views

urlpatterns =[
 	path('admin/', admin.site.urls),
    path('^mail/', views.mail_send_view),
    
    path('^tag/(?P<tag_slug>[-\w]+)/$', views.post_list_view, name='post_list_by_tag_name'),

 	path('^(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/(?P<post>[-\w]+)/$', views.post_detail_view,name='post_detail'),
    #path('(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/(?P<post>[-\w]+)/', views.post_detail_view,name='post_detail'),

    #path("^(?P<id>\d+)/share/$", views.mail_send_view),
    #path("(?P<id>\d+)/share/", views.mail_send_view),
    path("<id>/share/", views.mail_send_view),

    #use-in-last
    re_path('^.*$', views.post_list_view),
    #re_path('^.*$', views.PostListView.as_view()),
 ]


Ex:-
==> Now run server & verify tags for posts,
http://localhost:8000/




***(other-operations)***
***Now, make modifications in post_list.html file....
(for tags with links)
Ex:-
==> post_list.html (BlogApp main-folder)
-----------------------------------------------
<!DOCTYPE html>
{%extends 'BlogApp/base.html'%}
{%block title%}SRI SAI BLOG{%endblock%}
{%block content%}
    <h1>SRI SAI Blog</h1>
    <hr />
    {%if tag%}
        <h2>Posts tagged with "{{tag.name}}"</h2>
    {%endif%}

    {%for post in post_list%}
        <h2><a href="{{post.get_absolute_url}}">{{post.title}}</a></h2>
        <p>
            Tags:
            {% for tag in post.tags.all %}
                <a href="{%url "post_list_by_tag_name" tag.slug %}">{{tag.name}}</a>
                {%if not forloop.last%}, {%endif%}
            {%endfor%}
        </p>
        <p id='date'>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body| truncatewords:30|linebreaks}}
    {%endfor%}
    {%include 'BlogApp/pagination.html' with page=post_list%}
    {% comment %}{%include 'BlogApp/pagination.html' with page=page_obj%} {%endcomment %}

{%endblock%}

Ex:-
==> Now run server & verify tags-hyperlinks for posts,
http://localhost:8000/
(click on tags-link & verify all related posts with that tags are getting displayed or NOT)



